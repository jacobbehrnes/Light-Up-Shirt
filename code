//http://moving-rainbow.readthedocs.io/en/latest/guide/moving-rainbow/

#include <Adafruit_NeoPixel.h>
#include <math.h>
#include <avr/power.h>

#define N_PIXELS  16  // Number of pixels in strand
#define MIC_PIN   A0  // Microphone is attached to this analog pin
#define SAMPLE_WINDOW  22  //50 RECOMMENDED BY ADAFRUIT //Sample window for average level
#define PEAK_HANG 4// Time of pause before peak dot falls
#define PEAK_FALL 1//Rate of falling peak dot
#define INPUT_FLOOR 8 //10 //Lower range of analogRead input
#define INPUT_CEILING 25 //Max range of analogRead input, the lower the value the more sensitive (1023 = max)
#define BRIGHTNESS 50
#define BUTTON_PIN 9
#define NUM_MODES 6

bool oldState = HIGH;
bool newState = LOW;
int ledMode = 0;
byte prevKeyState = HIGH;
byte peak = 20;      // Peak level of column; used for falling dots
unsigned int sample;
int showType = 0;
int pos = 0, dir = 1;
byte dotCount = 0;  //Frame counter for peak dot
byte dotHangCount = 0; //Frame counter for holding peak dot
uint8_t  mode   = 0, // Current animation effect
         offset = 0; // Position of spinny eyes

uint32_t prevTime;

Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_PIXELS, 0, NEO_GRBW + NEO_KHZ800);
//NeoPatterns Ring1(16, 0, NEO_RGBW + NEO_KHZ800, &Ring1Complete);
Adafruit_NeoPixel strip1 = Adafruit_NeoPixel(N_PIXELS, 3, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(N_PIXELS, 4, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(N_PIXELS, 5, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip4 = Adafruit_NeoPixel(N_PIXELS, 6, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip5 = Adafruit_NeoPixel(N_PIXELS, 8, NEO_GRBW + NEO_KHZ800);

uint32_t color  = strip.Color(0, 0, 255, 0);//0xFF0000; // Start red

void setup() 
{
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  // This is only needed on 5V Arduinos (Uno, Leonardo, etc.).
  // Connect 3.3V to mic AND TO AREF ON ARDUINO and enable this
  // line.  Audio samples are 'cleaner' at 3.3V.
  // COMMENT OUT THIS LINE FOR 3.3V ARDUINOS (FLORA, ETC.):
  analogReference(INTERNAL);
  
  //prevTime = millis();
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  strip.begin();
  strip.setBrightness(BRIGHTNESS);
  strip.show(); // Initialize all pixels to 'off'
  strip1.begin();
  strip1.setBrightness(BRIGHTNESS);
  strip1.show();
  strip2.begin();
  strip2.setBrightness(BRIGHTNESS);
  strip2.show();
  strip3.begin();
  strip3.setBrightness(BRIGHTNESS);
  strip3.show();
  strip4.begin();
  strip4.setBrightness(BRIGHTNESS);
  strip4.show();
  strip5.begin();
  strip5.setBrightness(BRIGHTNESS);
  strip5.show();
}

void loop(){
  uint32_t t;
  
  newState = digitalRead(BUTTON_PIN);
  
  if (newState == LOW && oldState == HIGH) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if (newState == LOW) {
      showType++;
      if (showType > 5){
        showType = 0;
      }
    }
  }
  
  switch (showType){
     case 0: 
        resetLights();
        sparks();
        break;
     case 1: 
        colorWipe();
        break;
     case 2:
        chase(); // Red
        break;
      case 3: 
        vumeter();
        break;
      case 4: 
        scanner();
        break;
      case 5:
        theaterChase();
        break;
  }
  // Set the last button state to the old state.
  oldState = newState;
}

static void resetLights(){
  for(int i = 0; i<=strip.numPixels(); i++){
      strip.setPixelColor(i, 0); 
      strip1.setPixelColor(i, 0); 
      strip2.setPixelColor(i, 0); 
      strip3.setPixelColor(i, 0); 
      strip4.setPixelColor(i, 0); 
      strip5.setPixelColor(i, 0); 
   }
}

static void theaterChase(){
  if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
  uint32_t color = strip1.Color(255, 255, 0, 0);
  uint32_t color1 = strip1.Color(0, 0, 50, 0);
  int index = 0;

  for (int j=0; j<5; j++){
    if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
    for(int i=0; i< strip.numPixels(); i++){
      if ((i + index) % 3 == 0){
        if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
        strip.setPixelColor(i, color); 
        strip1.setPixelColor(i, color);
        strip2.setPixelColor(i, color);
        strip3.setPixelColor(i, color); 
        strip4.setPixelColor(i, color);
        strip5.setPixelColor(i, color); 
      }
      else{
        if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
        strip.setPixelColor(i, color1); 
        strip1.setPixelColor(i, color1);
        strip2.setPixelColor(i, color1);
        strip3.setPixelColor(i, color1); 
        strip4.setPixelColor(i, color1);
        strip5.setPixelColor(i, color1); 
      }
      strip.show();
      strip1.show();
      strip2.show();
      strip3.show();
      strip4.show();
      strip5.show();
      index++;
      if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
      delay(15);
    }
  }
}

uint8_t Red(uint32_t color)
    {
        return (color >> 16) & 0xFF;
    }

    // Returns the Green component of a 32-bit color
    uint8_t Green(uint32_t color)
    {
        return (color >> 8) & 0xFF;
    }

    // Returns the Blue component of a 32-bit color
    uint8_t Blue(uint32_t color)
    {
        return color & 0xFF;
    }

static void scanner(){
    int j;
    uint32_t color = strip.Color(255, 0, 0,0);

  // Draw 5 pixels centered on pos.  setPixelColor() will clip any
  // pixels off the ends of the strip, we don't need to watch for that.
  //original colors
  //strip.setPixelColor(pos - 2, 0x100000); // Dark red
  //strip.setPixelColor(pos - 1, 0x800000); // Medium red
  //strip.setPixelColor(pos    , 0xFF3000); // Center pixel is brightest

  strip.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip.setPixelColor(pos    , color); // Center pixel is brightest
  strip.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark red
  
  strip1.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip1.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip1.setPixelColor(pos    , color); // Center pixel is brightest
  strip1.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip1.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark red
  
  strip2.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip2.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip2.setPixelColor(pos    , color); // Center pixel is brightest
  strip2.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip2.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark red
  
  strip3.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip3.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip3.setPixelColor(pos    , color); // Center pixel is brightest
  strip3.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip3.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark red
  
  strip4.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip4.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip4.setPixelColor(pos    , color); // Center pixel is brightest
  strip4.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip4.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark redred
  
  strip5.setPixelColor(pos - 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >>5, 0)); // Dark red
  strip5.setPixelColor(pos - 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >>2, 0)); // Medium red
  strip5.setPixelColor(pos    , color); // Center pixel is brightest
  strip5.setPixelColor(pos + 1, strip.Color(Red(color) >> 2, Green(color) >> 2, Blue(color) >> 2, 0)); // Medium red
  strip5/.setPixelColor(pos + 2, strip.Color(Red(color) >> 5, Green(color) >> 5, Blue(color) >> 5, 0)); // Dark red

  strip.show();
  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
  strip5.show();
  delay(50);

  // Rather than being sneaky and erasing just the tail pixel,
  // it's easier to erase it all and draw a new one next time.
  for(j=-2; j<= 2; j++){
    strip.setPixelColor(pos+j, 0);
    strip1.setPixelColor(pos+j, 0);
    strip2.setPixelColor(pos+j, 0);
    strip3.setPixelColor(pos+j, 0);
    strip4.setPixelColor(pos+j, 0);
    strip5.setPixelColor(pos+j, 0);
  }

  // Bounce off ends of strip
  pos += dir;
  if(pos < 0) {
    pos = 1;
    dir = -dir;
  } else if(pos >= strip.numPixels()) {
    pos = strip.numPixels() - 2;
    dir = -dir;
  }
}

static void colorWipe(){
  color = strip.Color(random(0,255), random(0,255), random(0,255), 0);//strip.Color(255, 0, 0); //
  for(uint16_t i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, color);
      strip1.setPixelColor(i, color);
      strip2.setPixelColor(i, color);
      strip3.setPixelColor(i, color);
      strip4.setPixelColor(i, color);
      strip5.setPixelColor(i, color);
      strip.show();
      strip1.show();
      strip2.show();
      strip3.show();
      strip4.show();
      strip5.show();
      if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
      delay(15);
  }
}

static void sparks(){
  uint8_t i;

  i = random(0,16);
  strip.setPixelColor(i, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  strip1.setPixelColor(i+5, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  strip2.setPixelColor(i+1, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  strip3.setPixelColor(i+2, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  strip4.setPixelColor(i+4, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  strip5.setPixelColor(i+3, strip.Color(random(0,255),  random(0,255), random(0,255), 0));
  
  strip.show();
  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
  strip5.show();
  if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
  delay(10);
  strip.setPixelColor(i, 0);
  strip1.setPixelColor(i+5, 0);
  strip2.setPixelColor(i+1, 0);
  strip3.setPixelColor(i+2, 0);
  strip4.setPixelColor(i+4, 0);
  strip5.setPixelColor(i+3, 0);
}

static void vumeter(){
  unsigned long startMillis= millis();  // Start of sample window
  float peakToPeak = 0;   // peak-to-peak level

  unsigned int signalMax = 0;
  unsigned int signalMin = 1023;
  unsigned int c, y;
  
  // collect data for length of sample window (in mS)
  while (millis() - startMillis < SAMPLE_WINDOW)
  {
    sample = analogRead(MIC_PIN);
    if (sample < 1024)  // toss out spurious readings
    {
      if (sample > signalMax)
      {
        signalMax = sample;  // save just the max levels
      }
      else if (sample < signalMin)
      {
        signalMin = sample;  // save just the min levels
      }
    }
  }
  peakToPeak = signalMax - signalMin;  // max - min = peak-peak amplitude
 
  //Fill the strip with rainbow gradient
  for (int i=0;i<=N_PIXELS-1;i++)
  {
    strip.setPixelColor(i,Wheel(map(i,0,strip.numPixels()-1,30,150)));
    strip1.setPixelColor(i,Wheel(map(i,0,strip1.numPixels()-1,30,150)));
    strip2.setPixelColor(i,Wheel(map(i,0,strip2.numPixels()-1,30,150)));
    strip3.setPixelColor(i,Wheel(map(i,0,strip3.numPixels()-1,30,150)));
    strip4.setPixelColor(i,Wheel(map(i,0,strip4.numPixels()-1,30,150)));
    strip5.setPixelColor(i,Wheel(map(i,0,strip5.numPixels()-1,30,150)));
  }

  //Scale the input logarithmically instead of linearly
  c = fscale(INPUT_FLOOR, INPUT_CEILING, N_PIXELS, 0, peakToPeak, 2);
  
  if(c < peak) {
    peak = c;        // Keep dot on top
    dotHangCount = 0;    // make the dot hang before falling
  }
  if (c <= N_PIXELS) { // Fill partial column with off pixels
    drawLine(strip.numPixels(), strip.numPixels()-c, strip.Color(0, 0, 0));
    drawLine(strip1.numPixels(), strip1.numPixels()-c, strip1.Color(0, 0, 0));
    drawLine(strip2.numPixels(), strip2.numPixels()-c, strip2.Color(0, 0, 0));
    drawLine(strip3.numPixels(), strip3.numPixels()-c, strip3.Color(0, 0, 0));
    drawLine(strip4.numPixels(), strip4.numPixels()-c, strip4.Color(0, 0, 0));
    drawLine(strip5.numPixels(), strip5.numPixels()-c, strip5.Color(0, 0, 0));
  }

  // Set the peak dot to match the rainbow gradient
  y = strip.numPixels() - peak;
  
  strip.setPixelColor(y-1,Wheel(map(y,0,strip.numPixels()-1,30,150)));
  strip1.setPixelColor(y-1,Wheel(map(y,0,strip1.numPixels()-1,30,150)));
  strip2.setPixelColor(y-1,Wheel(map(y,0,strip2.numPixels()-1,30,150)));
  strip3.setPixelColor(y-1,Wheel(map(y,0,strip3.numPixels()-1,30,150)));
  strip4.setPixelColor(y-1,Wheel(map(y,0,strip4.numPixels()-1,30,150)));
  strip5.setPixelColor(y-1,Wheel(map(y,0,strip5.numPixels()-1,30,150)));

  strip.show();
  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
  strip5.show();

  // Frame based peak dot animation
  if(dotHangCount > PEAK_HANG) 
  { //Peak pause length
    if(++dotCount >= PEAK_FALL) 
    { //Fall rate 
      peak++;
      dotCount = 0;
    }
  } 
  else 
  {
    dotHangCount++; 
  }
}

static void chase() {
  uint32_t c = 0;

  long randNumber = random(0, strip.numPixels());  //pick random pixel between 0 and maximum number of pixels
  long randNumberR = random(0, 128);   //Random RED value
  long randNumberG = random(0, 128);   //Random GREEN value
  long randNumberB = random(0, 128);   //Random BLUE value
  c = strip.Color(randNumberR, randNumberG, randNumberB);
  
  for(uint16_t i=0; i<strip1.numPixels()+4; i++) {
      strip.setPixelColor(i  , c); // Draw new pixel
      strip.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip1.setPixelColor(i  , c); // Draw new pixel
      strip1.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip2.setPixelColor(i  , c); // Draw new pixel
      strip2.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip3.setPixelColor(i  , c); // Draw new pixel
      strip3.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip4.setPixelColor(i  , c); // Draw new pixel
      strip4.setPixelColor(i-4, 0); // Erase pixel a few steps back
      strip5.setPixelColor(i  , c); // Draw new pixel
      strip5.setPixelColor(i-4, 0); // Erase pixel a few steps back
      
      strip.show();
      strip1.show();
      strip2.show();
      strip3.show();
      strip4.show();
      strip5.show();
      if (digitalRead(BUTTON_PIN) == LOW && oldState == HIGH) return;
      delay(20);
  }
}

//Used to draw a line between two points of a given color
void drawLine(uint8_t from, uint8_t to, uint32_t c) {
  uint8_t fromTemp;
  if (from > to) {
    fromTemp = from;
    from = to;
    to = fromTemp;
  }
  for(int i=from; i<=to; i++){
    strip.setPixelColor(i, c);
    strip1.setPixelColor(i, c);
    strip2.setPixelColor(i, c);
    strip3.setPixelColor(i, c);
    strip4.setPixelColor(i, c);
    strip5.setPixelColor(i, c);
  }
}

float fscale( float originalMin, float originalMax, float newBegin, float newEnd, float inputValue, float curve){
  float OriginalRange = 0;
  float NewRange = 0;
  float zeroRefCurVal = 0;
  float normalizedCurVal = 0;
  float rangedValue = 0;
  boolean invFlag = 0;

  if (curve > 10) curve = 10;
  if (curve < -10) curve = -10;

  curve = (curve * -.1) ; // - invert and scale - this seems more intuitive - postive numbers give more weight to high end on output 
  curve = pow(10, curve); // convert linear scale into lograthimic exponent for other pow function
  
  if (inputValue < originalMin) {
    inputValue = originalMin;
  }
  if (inputValue > originalMax) {
    inputValue = originalMax;
  }

  // Zero Refference the values
  OriginalRange = originalMax - originalMin;

  if (newEnd > newBegin){ 
    NewRange = newEnd - newBegin;
  }
  else
  {
    NewRange = newBegin - newEnd; 
    invFlag = 1;
  }

  zeroRefCurVal = inputValue - originalMin;
  normalizedCurVal  =  zeroRefCurVal / OriginalRange;   // normalize to 0 - 1 float

  // Check for originalMin > originalMax  - the math for all other cases i.e. negative numbers seems to work out fine 
  if (originalMin > originalMax ) {
    return 0;
  }

  if (invFlag == 0){
    rangedValue =  (pow(normalizedCurVal, curve) * NewRange) + newBegin;

  }
  else     // invert the ranges
  {   
    rangedValue =  newBegin - (pow(normalizedCurVal, curve) * NewRange); 
  }

  return rangedValue;
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
    return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } 
  else if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } 
  else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
